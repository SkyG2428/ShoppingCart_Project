// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DBFirstLayer.Models;

namespace DBFirstLayer
{
    public partial class SchoolSystemContext : DbContext
    {
        public SchoolSystemContext(DbContextOptions<SchoolSystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<Fee> Fees { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAttendance> StudentAttendances { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeacherAttendance> TeacherAttendances { get; set; }
        public virtual DbSet<TeacherSubject> TeacherSubjects { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=MR-AG\\SQLEXPRESS;Initial Catalog=SchoolSystem;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Exam>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Exams)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__Exam__ClassId__5DCAEF64");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Exams)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK__Exam__SubjectId__5EBF139D");
            });

            modelBuilder.Entity<Expense>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Expenses)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__Expense__ClassId__619B8048");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Expenses)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK__Expense__Subject__628FA481");
            });

            modelBuilder.Entity<Fee>(entity =>
            {
                entity.HasKey(e => e.FeesId)
                    .HasName("PK__Fees__7BD9FD2743E76549");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__Fees__ClassId__5AEE82B9");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__Student__ClassId__3B75D760");
            });

            modelBuilder.Entity<StudentAttendance>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.StudentAttendances)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__StudentAt__Class__571DF1D5");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.StudentAttendances)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK__StudentAt__Subje__5812160E");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__Subject__ClassId__38996AB5");
            });

            modelBuilder.Entity<TeacherAttendance>(entity =>
            {
                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeacherAttendances)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("FK__TeacherAt__Teach__4E88ABD4");
            });

            modelBuilder.Entity<TeacherSubject>(entity =>
            {
                entity.HasOne(d => d.Class)
                    .WithMany(p => p.TeacherSubjects)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK__TeacherSu__Class__5165187F");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.TeacherSubjects)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK__TeacherSu__Subje__52593CB8");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeacherSubjects)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("FK__TeacherSu__Teach__534D60F1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}